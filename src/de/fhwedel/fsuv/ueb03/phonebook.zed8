This specification describes Phonebook

─ [ NAME, PHONE ] └

State space

┌ PhoneBook
  known :  𝔽 NAME
  tel : NAME ⇸ PHONE
|
  known = dom tel
└
dom macht "zweiseitige Bindung" -> Manipulation an known/tel bewirkt Manipulation tel/known

Initialization

┌ InitPhoneBook
 PhoneBook ′
|
  tel′ = ∅
└


Operations

The good parts

Zustansschema aber keine Operation (es wird nichts verändert)
┌ lookup
  ΞPhoneBook
  name? : NAME
  phone! : PHONE
|
  name? ∈ known
  phone! = tel(name?)
└

Operation -> hat Zustand der verändert wird
┌ addName
  ΔPhoneBook
  name? : NAME
  phone? : PHONE
|
  name? ∉ known
  
  tel′ = tel ∪ { name? ↦ phone? } 
└
Könnte man auch mit: known' = known \ { name? } machen

Operation
┌ delName
  ΔPhoneBook
  name? : NAME
|
  name? ∈ known
  
  tel′ = tel ∖ { name? ↦ tel(name?) }
└


Error handling

─
  REPORT ::= okay | name_not_known | name_already_known
└

Nur Schema (kein Zustandsschema und auch keine Operation)
┌ Success
  rep! : REPORT
|
  rep! = okay
└

Zustandsschema
┌ NotKnown
  ΞPhoneBook
  name? : NAME
  rep! : REPORT
|
  name? ∉ known
  rep! = name_not_known
└

Zustandsschema
┌ AlreadyKnown
  ΞPhoneBook
  name? : NAME
  rep! : REPORT
|
  name? ∈ known
  rep! = name_already_known
└

Robust Operations

─
  DoFindOp  == (lookup ∧ Success)  ∨ NotKnown
└

─
  DoAddName  == (addName ∧ Success) ∨AlreadyKnown
└

─
  DoDelName  == (delName ∧ Success) ∨ NotKnown
└
